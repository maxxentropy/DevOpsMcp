services:
  devops-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    image: devops-mcp:latest
    container_name: devops-mcp-server
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - MCP__Protocol=sse
      - AzureDevOps__OrganizationUrl=${AZURE_DEVOPS_ORG_URL}
      - AzureDevOps__PersonalAccessToken=${AZURE_DEVOPS_PAT}
      - AzureDevOps__AuthMethod=PersonalAccessToken
      - Logging__LogLevel__Default=Information
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - devops-mcp-network

  redis:
    image: redis:7-alpine
    container_name: devops-mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - devops-mcp-network

  prometheus:
    image: prom/prometheus:latest
    container_name: devops-mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - devops-mcp-network

  grafana:
    image: grafana/grafana:latest
    container_name: devops-mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - devops-mcp-network
    depends_on:
      - prometheus

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  devops-mcp-network:
    driver: bridge